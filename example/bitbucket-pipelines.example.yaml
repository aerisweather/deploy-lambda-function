# Run on LambCI's lambda-simulation container,
# to give an environment that's close to the real deal
image: lambci/build-nodejs4.3

clone:
  depth: 1

pipelines:
  # Default build scripts...
  default:
    - step:
        script:
          # Login to NPM
          - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          - npm install -g npm
          - npm install
          - npm run build
          - npm run test

  # master/staging/development get deployed to lambda
  branches:
    master:
      - step:
          script:
            # Configure npm with your NPM_TOKEN
            - touch .npmrc && echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
            # Build your code
            - npm install && npm build && npm test
            # Deploy to lambda, using prod config
            - ./node_modules/.bin/deploy-lambda-function -c ./deploy/params.prod.json
    staging:
      - step:
          script:
            # Configure npm with your NPM_TOKEN
            - touch .npmrc && echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
            # Build your code
            - npm install && npm build && npm test
            # Deploy to lambda, using staging config
            - ./node_modules/.bin/deploy-lambda-function -c ./deploy/params.staging.json
    development:
      - step:
          script:
            # Configure npm with your NPM_TOKEN
            - touch .npmrc && echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
            # Build your code
            - npm install && npm build && npm test
            # Deploy to lambda, using dev config
            - ./node_modules/.bin/deploy-lambda-function -c ./deploy/params.dev.json